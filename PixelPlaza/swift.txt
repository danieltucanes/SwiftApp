Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Models\output.txt
// //  CartItem.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation  // //  Product.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation   struct Product: Identifiable, Codable {     let id: Int     let name: String     let category: String     let description: String     let price: Double     let imageName: String }  // //  User.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Resources\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\ViewModels\output.txt
// //  AuthViewModel.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation  // //  CartViewModel.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation  // //  NavigationViewModel.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation  // //  ProductViewModel.swift //  PixelPlaza // //  Created by Telematica on 3/06/25. //  import SwiftUI  class ProductViewModel: ObservableObject {     @Published var products: [Product] = []     @Published var isLoading = false     @Published var errorMessage: String? = nil      func loadProducts() {         isLoading = true         errorMessage = nil          DispatchQueue.global(qos: .background).async {             guard let url = Bundle.main.url(forResource: "products", withExtension: "json"),                   let data = try? Data(contentsOf: url),                   let products = try? JSONDecoder().decode([Product].self, from: data) else {                 DispatchQueue.main.async {                     self.errorMessage = "No se pudo cargar la lista de productos."                     self.isLoading = false                 }                 return             }             DispatchQueue.main.async {                 self.products = products                 self.isLoading = false             }         }     } }  // //  StoreViewModel.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import Foundation import Combine  class StoreViewModel: ObservableObject {     @Published var searchText: String = ""     @Published var filteredProducts: [Product] = []      private var cancellables = Set<AnyCancellable>()      init(productViewModel: ProductViewModel) {         // Escuchar cambios en searchText y productos         Publishers.CombineLatest($searchText, productViewModel.$products)             .map { searchText, allProducts in                 guard !searchText.isEmpty else { return allProducts }                 return allProducts.filter {                     $0.name.localizedCaseInsensitiveContains(searchText) ||                     $0.category.localizedCaseInsensitiveContains(searchText)                 }             }             .assign(to: \.filteredProducts, on: self)             .store(in: &cancellables)     } }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\AccentColor.colorset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\AppIcon.appiconset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\enlarged-image.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-1.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-2.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-3.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-4.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-5.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-available-6.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-1.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-2.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-3.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-4.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-5.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-6.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-7.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-8.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\image-list-9.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\inicio.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\logo.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Assets.xcassets\user.imageset\output.txt


Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\About\output.txt
// //  AboutView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct AboutView: View {     var body: some View {         Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)     } }  #Preview {     AboutView() }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\Auth\output.txt
// //  LoginView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI import SwiftUI  struct LoginView: View {     @State private var correo: String = ""     @State private var password: String = ""     @State private var navigateToSignIn = false     @State private var isLoggedIn = false // Estado para controlar navegación a StoreView      @Environment(\.colorScheme) var colorScheme      var body: some View {         NavigationStack {             ZStack {                 (colorScheme == .dark ? Color(.systemBackground) : Color(.systemBackground))                     .ignoresSafeArea()                  VStack(spacing: 16) {                     Image("logo")                         .resizable()                         .scaledToFit()                         .frame(width: 180, height: 180)                      Text("Bienvenido")                         .font(.system(size: 20, weight: .bold))                         .foregroundColor(Color.primary)                      Text("Inicia sesión ahora")                         .font(.system(size: 16))                         .foregroundColor(Color.primary.opacity(0.8))                      CustomTextField3(label: "Correo", text: $correo, isSecure: false, keyboardType: .emailAddress)                     CustomTextField3(label: "Contraseña", text: $password, isSecure: true)                      Button(action: {                         if !correo.isEmpty && !password.isEmpty {                             isLoggedIn = true                         }                     }) {                         Text("Iniciar sesión")                             .fontWeight(.bold)                             .frame(maxWidth: .infinity, minHeight: 50)                             .background(Color.accentColor)                             .foregroundColor(.white)                             .cornerRadius(10)                     }                     .padding(.top, 8)                                          NavigationLink(destination: StoreView(), isActive: $isLoggedIn) {                         EmptyView()                     }                     .hidden()                                          Text("Olvidé mi contraseña")                         .font(.system(size: 16))                         .foregroundColor(Color.primary.opacity(0.8))                         .padding(.top, 8)                                              Text("O continuar con")                         .font(.system(size: 14))                         .foregroundColor(Color.primary.opacity(0.7))                         .padding(.top, 8)                                              HStack(spacing: 40) {                         Button(action: {                                                      }) {                             Image("google_icon")                                 .resizable()                                 .frame(width: 40, height: 40)                         }                          Button(action: {                                                      }) {                             Image("facebook_icon")                                 .resizable()                                 .frame(width: 40, height: 40)                         }                     }                     .padding(.top, 8)                      Spacer()                                          HStack(spacing: 16) {                         NavigationLink(destination: RegisterView(), isActive: $navigateToSignIn) {                             Button("Registrarme") {                                 navigateToSignIn = true                             }                             .buttonStyle(SecondaryButtonStyle())                         }                     }                 }                 .padding(16)             }         }     } }  struct CustomTextField3: View {     let label: String     @Binding var text: String     var isSecure: Bool = false     var keyboardType: UIKeyboardType = .default      var body: some View {         VStack(alignment: .leading, spacing: 6) {             Text(label)                 .font(.subheadline)                 .foregroundColor(.secondary)              if isSecure {                 SecureField(label, text: $text)                     .padding()                     .background(Color(UIColor.secondarySystemBackground))                     .cornerRadius(8)                     .keyboardType(keyboardType)             } else {                 TextField(label, text: $text)                     .padding()                     .background(Color(UIColor.secondarySystemBackground))                     .cornerRadius(8)                     .keyboardType(keyboardType)                     .autocapitalization(.none)                     .disableAutocorrection(true)             }         }         .padding(.bottom, 10)     } }  #Preview {     LoginView() }  // //  RegisterView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct RegisterView: View {     @State private var nombre: String = ""         @State private var correo: String = ""         @State private var password: String = ""         @State private var confirmPassword: String = ""         @State private var navigateToSignUp = false         @Environment(\.colorScheme) var colorScheme          var body: some View {             NavigationStack {                 ZStack {                     (colorScheme == .dark ? Color(.systemBackground) : Color(.systemBackground))                         .ignoresSafeArea()                      VStack(spacing: 20) {                         Spacer()                                                  Image("user")                             .resizable()                             .scaledToFit()                             .frame(width: 110, height: 110)                          Text("Llena el siguiente formulario con tus datos personales. Crea una contraseña y registra una cuenta de correo electrónico")                             .font(.body)                             .foregroundColor(Color.primary)                             .multilineTextAlignment(.center)                             .padding(.horizontal, 16)                             .lineLimit(nil)                             .fixedSize(horizontal: false, vertical: true) // <- CLAVE                          Spacer()                           CustomTextField2(label: "Nombre completo", text: $nombre)                         CustomTextField2(label: "Correo", text: $correo, keyboardType: .emailAddress)                         CustomTextField2(label: "Contraseña", text: $password, isSecure: true)                         CustomTextField2(label: "Confirmar contraseña", text: $confirmPassword, isSecure: true)                          Spacer()                          NavigationLink(destination: LoginView(), isActive: $navigateToSignUp) {                             Button("Registrarme") {                                 navigateToSignUp = true                             }                             .buttonStyle(SecondaryButtonStyle())                         }                         Spacer()                     }                     .padding(20)                 }             }         } }   struct CustomTextField2: View {     let label: String     @Binding var text: String     var isSecure: Bool = false     var keyboardType: UIKeyboardType = .default      var body: some View {         VStack(alignment: .leading, spacing: 6) {             Text(label)                 .font(.subheadline)                 .foregroundColor(.secondary)              if isSecure {                 SecureField(label, text: $text)                     .padding()                     .background(Color(UIColor.secondarySystemBackground))                     .cornerRadius(8)                     .keyboardType(keyboardType)             } else {                 TextField(label, text: $text)                     .padding()                     .background(Color(UIColor.secondarySystemBackground))                     .cornerRadius(8)                     .keyboardType(keyboardType)                     .autocapitalization(.none)                     .disableAutocorrection(true)             }         }         .padding(.bottom, 10)     } }  #Preview {     RegisterView() }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\Cart\output.txt
// //  CartView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct CartView: View {     var body: some View {         Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)     } }  #Preview {     CartView() }  // //  CheckoutView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct CheckoutView: View {     var body: some View {         Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)     } }  #Preview {     CheckoutView() }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\Common\output.txt
// //  CustomTextField.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct CustomTextField: View {     var body: some View {         Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)     } }  #Preview {     CustomTextField() }  // //  ProductCardView.swift //  PixelPlaza // //  Created by Telematica on 3/06/25. //   import SwiftUI  struct ProductCardView: View {     let product: Product      var body: some View {         GeometryReader { geometry in             VStack(alignment: .leading, spacing: 8) {                 ZStack {                     Rectangle()                         .foregroundColor(.gray.opacity(0.1))                      Image(product.imageName)                         .resizable()                         .scaledToFill()                         .frame(maxWidth: .infinity, maxHeight: .infinity)                         .clipped()                 }                 .frame(width: geometry.size.width, height: geometry.size.width)                 .cornerRadius(12)                  VStack(alignment: .leading, spacing: 4) {                     Text(product.name)                         .font(.headline)                         .foregroundColor(.blue)                         .lineLimit(1)                      Text(product.category)                         .font(.subheadline)                         .foregroundColor(.gray)                         .lineLimit(1)                      Text(String(format: "$%.2f", product.price))                         .font(.subheadline)                         .foregroundColor(.blue)                 }                  Spacer()             }             .padding()             .frame(width: geometry.size.width, height: geometry.size.width + 90)             .background(Color.white)             .cornerRadius(16)             .shadow(color: .black.opacity(0.05), radius: 5, x: 0, y: 2)         }         .frame(height: 260)     } }  // //  SearchBarView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct SearchBarView: View {     @Binding var searchText: String      var body: some View {         HStack {             Image(systemName: "magnifyingglass")                 .foregroundColor(.gray)              TextField("Buscar productos", text: $searchText)                 .autocapitalization(.none)                 .disableAutocorrection(true)              if !searchText.isEmpty {                 Button(action: {                     searchText = ""                 }) {                     Image(systemName: "xmark.circle.fill")                         .foregroundColor(.gray)                 }             }         }         .padding(10)         .background(Color(UIColor.secondarySystemBackground))         .cornerRadius(10)         .padding(.horizontal)     } }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\Home\output.txt
// //  HomeView.swift //  PixelPlaza // //  Created by Telematica on 29/05/25. //  import SwiftUI  struct HomeView: View {     @State private var navigateToStore = false        @State private var navigateToSignUp = false         var body: some View {            NavigationStack {                ZStack {                    Image("inicio")                        .resizable()                        .scaledToFill()                        .ignoresSafeArea()                     VStack(spacing: 16) {                        Spacer()                         Text("PixelPlaza")                            .font(.system(size: 32, weight: .bold))                            .foregroundColor(.white)                         Image("logo")                            .resizable()                            .frame(width: 100, height: 100)                            .clipShape(RoundedRectangle(cornerRadius: 12))                         Text("Boutique")                            .font(.title2)                            .foregroundColor(.white)                            .bold()                         Spacer()                         HStack(spacing: 16) {                            NavigationLink(destination: StoreView(), isActive: $navigateToStore) {                                Button("Ingresar") {                                    navigateToStore = true                                }                                .buttonStyle(PrimaryButtonStyle())                            }                             NavigationLink(destination: LoginView(), isActive: $navigateToSignUp) {                                Button("Registrarme") {                                    navigateToSignUp = true                                }                                .buttonStyle(SecondaryButtonStyle())                            }                        }                                                .padding(.horizontal, 16)                    }                    .padding(16)                }            }        }    }         struct PrimaryButtonStyle: ButtonStyle {        func makeBody(configuration: Configuration) -> some View {            configuration.label                .frame(maxWidth: .infinity, minHeight: 50)                .background(Color.accentColor)                .foregroundColor(.white)                .cornerRadius(8)                .opacity(configuration.isPressed ? 0.7 : 1.0)        }    }     struct SecondaryButtonStyle: ButtonStyle {        func makeBody(configuration: Configuration) -> some View {            configuration.label                .frame(maxWidth: .infinity, minHeight: 50)                .background(Color.purple)                .foregroundColor(.white)                .cornerRadius(8)                .opacity(configuration.isPressed ? 0.7 : 1.0)        }    }    #Preview {               HomeView()              .preferredColorScheme(.dark)       }   

Contenido de: C:\Users\Tu\Downloads\PixelPlaza 2\PixelPlaza\PixelPlaza\Views\Store\output.txt
// //  ProductDetailView.swift //  PixelPlaza // //  Created by Telematica on 3/06/25. //   import SwiftUI   struct ProductDetailView: View {     let product: Product      var body: some View {         ScrollView {             VStack(alignment: .leading) {                 Image(product.imageName)                     .resizable()                     .scaledToFit()                     .cornerRadius(12)                     .padding()                  Text(product.name)                     .font(.largeTitle)                     .bold()                     .padding(.horizontal)                  Text(product.category)                     .font(.title3)                     .foregroundColor(.secondary)                     .padding(.horizontal)                  Text(String(format: "$%.2f", product.price))                     .font(.title2)                     .foregroundColor(.accentColor)                     .padding(.horizontal)                  Text(product.description)                     .font(.body)                     .padding()             }         }         .navigationTitle(product.name)         .navigationBarTitleDisplayMode(.inline)     } }  // //  StoreView.swift //  PixelPlaza // //  Created by Telematica on 3/06/25. // import SwiftUI  struct StoreView: View {     @StateObject private var productViewModel = ProductViewModel()     @StateObject private var storeViewModel: StoreViewModel      init() {         let productVM = ProductViewModel()         _productViewModel = StateObject(wrappedValue: productVM)         _storeViewModel = StateObject(wrappedValue: StoreViewModel(productViewModel: productVM))     }      let columns = [         GridItem(.flexible()),         GridItem(.flexible())     ]      var body: some View {         NavigationStack {             VStack(spacing: 0) {                 SearchBarView(searchText: $storeViewModel.searchText)                     .padding(.top, 10)                  Group {                     if productViewModel.isLoading {                         Spacer()                         ProgressView()                             .scaleEffect(1.5)                         Spacer()                     } else if let error = productViewModel.errorMessage {                         Spacer()                         Text(error)                             .foregroundColor(.red)                         Spacer()                     } else {                         ScrollView {                             LazyVGrid(columns: columns, spacing: 16) {                                 ForEach(storeViewModel.filteredProducts) { product in                                     NavigationLink(destination: ProductDetailView(product: product)) {                                         ProductCardView(product: product)                                     }                                 }                             }                             .padding(.horizontal, 16)                             .padding(.top, 8)                         }                     }                 }                 .navigationTitle("Tienda")                 .onAppear {                     productViewModel.loadProducts()                 }             }         }     } }   // Preview struct StoreView_Previews: PreviewProvider {     static var previews: some View {         StoreView()     } }   


